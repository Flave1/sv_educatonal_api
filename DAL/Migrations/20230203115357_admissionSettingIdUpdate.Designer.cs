// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace SMP.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230203115357_admissionSettingIdUpdate")]
    partial class admissionSettingIdUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Authentication.AppActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ActivityParentId");

                    b.ToTable("AppActivity");
                });

            modelBuilder.Entity("DAL.Authentication.AppActivityParent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AppActivityParent");
                });

            modelBuilder.Entity("DAL.Authentication.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DOB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Authentication.RefreshToken", b =>
                {
                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JwtId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("DAL.Authentication.RoleActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanExport")
                        .HasColumnType("bit");

                    b.Property<bool>("CanImport")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleActivity");
                });

            modelBuilder.Entity("DAL.ClassEntities.ClassLookup", b =>
                {
                    b.Property<Guid>("ClassLookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("GradeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClassLookupId");

                    b.HasIndex("GradeGroupId");

                    b.ToTable("ClassLookUp");
                });

            modelBuilder.Entity("DAL.ClassEntities.SessionClass", b =>
                {
                    b.Property<Guid>("SessionClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssessmentScore")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClassCaptainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ExamScore")
                        .HasColumnType("int");

                    b.Property<Guid?>("FormTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InSession")
                        .HasColumnType("bit");

                    b.Property<int>("PassMark")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SessionClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("FormTeacherId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionClass");
                });

            modelBuilder.Entity("DAL.SessionEntities.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HeadTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SessionId");

                    b.HasIndex("HeadTeacherId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("DAL.StudentInformation.StudentContact", b =>
                {
                    b.Property<Guid>("StudentContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BestSubjectIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Hobbies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentContactId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentContact");
                });

            modelBuilder.Entity("DAL.SubjectModels.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScoreEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SubjectId");

                    b.HasIndex("ScoreEntryId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("DAL.TeachersInfor.Teacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hobbies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortBiography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeacherId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SMP.DAL.Models.Admission.Admission", b =>
                {
                    b.Property<Guid>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdmissionSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CandidateAdmissionStatus")
                        .HasColumnType("int");

                    b.Property<string>("CandidateCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryOfOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Credentials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExaminationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGAOfOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middlename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateOfOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AdmissionId");

                    b.HasIndex("AdmissionNotificationId");

                    b.HasIndex("AdmissionSettingId");

                    b.HasIndex("ClassId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("SMP.DAL.Models.Admission.AdmissionNotification", b =>
                {
                    b.Property<Guid>("AdmissionNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ParentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AdmissionNotificationId");

                    b.ToTable("AdmissionNotifications");
                });

            modelBuilder.Entity("SMP.DAL.Models.Admission.AdmissionSetting", b =>
                {
                    b.Property<Guid>("AdmissionSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdmissionSettingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AdmissionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Classes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FailedExamEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassedExamEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegistrationFee")
                        .HasColumnType("bit");

                    b.Property<string>("ScreeningEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AdmissionSettingId");

                    b.ToTable("AdmissionSettings");
                });

            modelBuilder.Entity("SMP.DAL.Models.Annoucement.Announcements", b =>
                {
                    b.Property<Guid>("AnnouncementsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnnouncementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<string>("SeenByIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SentBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AnnouncementsId");

                    b.HasIndex("SentBy");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.AssessmentScoreRecord", b =>
                {
                    b.Property<Guid>("AssessmentScoreRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssessmentType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClassAssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HomeAssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOfferring")
                        .HasColumnType("bit");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StudentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssessmentScoreRecordId");

                    b.HasIndex("ClassAssessmentId");

                    b.HasIndex("HomeAssessmentId");

                    b.HasIndex("StudentContactId");

                    b.ToTable("AssessmentScoreRecord");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.ClassAssessment", b =>
                {
                    b.Property<Guid>("ClassAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AssessmentScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListOfStudentIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Scorer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionClassSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassAssessmentId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SessionClassSubjectId");

                    b.HasIndex("SessionTermId");

                    b.ToTable("ClassAssessment");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.HomeAssessment", b =>
                {
                    b.Property<Guid>("HomeAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssessmentScore")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DateDeadLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SessionClassGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionClassSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeDeadLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("HomeAssessmentId");

                    b.HasIndex("SessionClassGroupId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SessionClassSubjectId");

                    b.HasIndex("SessionTermId");

                    b.ToTable("HomeAssessment");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.HomeAssessmentFeedBack", b =>
                {
                    b.Property<Guid>("HomeAssessmentFeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("HomeAssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Included")
                        .HasColumnType("bit");

                    b.Property<decimal>("IncludedScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Mark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("HomeAssessmentFeedBackId");

                    b.HasIndex("HomeAssessmentId");

                    b.HasIndex("StudentContactId");

                    b.ToTable("HomeAssessmentFeedBack");
                });

            modelBuilder.Entity("SMP.DAL.Models.Attendance.StudentAttendance", b =>
                {
                    b.Property<Guid>("ClassAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRegisterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClassAttendanceId");

                    b.HasIndex("ClassRegisterId");

                    b.HasIndex("StudentContactId");

                    b.ToTable("StudentAttendance");
                });

            modelBuilder.Entity("SMP.DAL.Models.ClassEntities.SessionClassGroup", b =>
                {
                    b.Property<Guid>("SessionClassGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListOfStudentContactIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionClassSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SessionClassGroupId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SessionClassSubjectId");

                    b.ToTable("SessionClassGroup");
                });

            modelBuilder.Entity("SMP.DAL.Models.ClassEntities.SessionClassSubject", b =>
                {
                    b.Property<Guid>("SessionClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssessmentScore")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ExamScore")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SessionClassSubjectId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubjectTeacherId");

                    b.ToTable("SessionClassSubject");
                });

            modelBuilder.Entity("SMP.DAL.Models.GradeEntities.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("GradeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LowerLimit")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpperLimit")
                        .HasColumnType("int");

                    b.HasKey("GradeId");

                    b.HasIndex("GradeGroupId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("SMP.DAL.Models.GradeEntities.GradeGroup", b =>
                {
                    b.Property<Guid>("GradeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("GradeGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GradeGroupId");

                    b.HasIndex("SessionId");

                    b.ToTable("GradeGroup");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.ClassNote", b =>
                {
                    b.Property<Guid>("ClassNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AprrovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("DateSentForApproval")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("NoteContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClassNoteId");

                    b.HasIndex("Author");

                    b.HasIndex("SessionTermId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassNote");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.StudentNote", b =>
                {
                    b.Property<Guid>("StudentNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AprrovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("NoteContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("StudentNoteId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SessionTermId");

                    b.HasIndex("StudentContactId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentNote");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.StudentNoteComment", b =>
                {
                    b.Property<Guid>("StudentNoteCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RepliedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentNoteCommentId");

                    b.HasIndex("RepliedToId");

                    b.HasIndex("StudentNoteId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentNoteComment");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.TeacherClassNote", b =>
                {
                    b.Property<Guid>("TeacherClassNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Classes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TeacherClassNoteId");

                    b.HasIndex("ClassNoteId");

                    b.HasIndex("SessionTermId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherClassNote");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.TeacherClassNoteComment", b =>
                {
                    b.Property<Guid>("TeacherClassNoteCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassNoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RepliedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeacherClassNoteCommentId");

                    b.HasIndex("ClassNoteId");

                    b.HasIndex("RepliedToId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherClassNoteComment");
                });

            modelBuilder.Entity("SMP.DAL.Models.Parents.Parents", b =>
                {
                    b.Property<Guid>("Parentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Parentid");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SMP.DAL.Models.PinManagement.UploadedPin", b =>
                {
                    b.Property<Guid>("UploadedPinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UploadedPinId");

                    b.ToTable("UploadedPin");
                });

            modelBuilder.Entity("SMP.DAL.Models.PinManagement.UsedPin", b =>
                {
                    b.Property<Guid>("UsedPinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateUsed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UploadedPinId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsedPinId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SessionTermId");

                    b.HasIndex("StudentContactId");

                    b.HasIndex("UploadedPinId");

                    b.ToTable("UsedPin");
                });

            modelBuilder.Entity("SMP.DAL.Models.PortalSettings.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationEmailLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationPageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receivers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiversEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Svg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SMP.DAL.Models.PortalSettings.NotificationSetting", b =>
                {
                    b.Property<Guid>("NotificationSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Announcement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assessment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassManagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Enrollment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublishResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecoverPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShouldSendToParentsOnResultPublish")
                        .HasColumnType("bit");

                    b.Property<string>("Staff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationSettingId");

                    b.ToTable("NotificationSetting");
                });

            modelBuilder.Entity("SMP.DAL.Models.PortalSettings.ResultSetting", b =>
                {
                    b.Property<Guid>("ResultSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BatchPrinting")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("CumulativeResult")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("PrincipalStample")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PromoteAll")
                        .HasColumnType("bit");

                    b.Property<string>("SelectedTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowNewsletter")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPositionOnResult")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ResultSettingId");

                    b.ToTable("ResultSetting");
                });

            modelBuilder.Entity("SMP.DAL.Models.PortalSettings.SchoolSetting", b =>
                {
                    b.Property<Guid>("SchoolSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolAbbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SchoolSettingsId");

                    b.ToTable("SchoolSettings");
                });

            modelBuilder.Entity("SMP.DAL.Models.Register.ClassRegister", b =>
                {
                    b.Property<Guid>("ClassRegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("RegisterLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClassRegisterId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SessionTermId");

                    b.ToTable("ClassRegister");
                });

            modelBuilder.Entity("SMP.DAL.Models.ResultModels.ClassScoreEntry", b =>
                {
                    b.Property<Guid>("ClassScoreEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassScoreEntryId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassScoreEntry");
                });

            modelBuilder.Entity("SMP.DAL.Models.ResultModels.ScoreEntry", b =>
                {
                    b.Property<Guid>("ScoreEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssessmentScore")
                        .HasColumnType("int");

                    b.Property<Guid>("ClassScoreEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("ExamScore")
                        .HasColumnType("int");

                    b.Property<bool>("IsOffered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ScoreEntryId");

                    b.HasIndex("ClassScoreEntryId");

                    b.HasIndex("SessionTermId");

                    b.HasIndex("StudentContactId");

                    b.ToTable("ScoreEntry");
                });

            modelBuilder.Entity("SMP.DAL.Models.ResultModels.ScoreEntryHistory", b =>
                {
                    b.Property<Guid>("ScoreEntryHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionClassId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionTermId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subjectid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScoreEntryHistoryId");

                    b.ToTable("ScoreEntryHistory");
                });

            modelBuilder.Entity("SMP.DAL.Models.ResultModels.SessionClassArchive", b =>
                {
                    b.Property<Guid>("SessionClassArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPrintedResult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SessionClassArchiveId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SessionTermId");

                    b.HasIndex("StudentContactId");

                    b.ToTable("SessionClassArchive");
                });

            modelBuilder.Entity("SMP.DAL.Models.SessionEntities.SessionTerm", b =>
                {
                    b.Property<Guid>("SessionTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TermName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionTermId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionTerm");
                });

            modelBuilder.Entity("SMP.DAL.Models.StudentImformation.StudentSessionClassHistory", b =>
                {
                    b.Property<Guid>("StudentSessionClassHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SessionClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SessionTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("StudentSessionClassHistoryId");

                    b.HasIndex("SessionClassId");

                    b.HasIndex("SessionTermId");

                    b.HasIndex("StudentContactId");

                    b.ToTable("StudentSessionClassHistory");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTable", b =>
                {
                    b.Property<Guid>("ClassTimeTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClassTimeTableId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassTimeTable");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTableDay", b =>
                {
                    b.Property<Guid>("ClassTimeTableDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassTimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClassTimeTableDayId");

                    b.HasIndex("ClassTimeTableId");

                    b.ToTable("ClassTimeTableDay");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTableTime", b =>
                {
                    b.Property<Guid>("ClassTimeTableTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassTimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("End")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Start")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ClassTimeTableTimeId");

                    b.HasIndex("ClassTimeTableId");

                    b.ToTable("ClassTimeTableTime");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTableTimeActivity", b =>
                {
                    b.Property<Guid>("ClassTimeTableTimeActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClassTimeTableDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassTimeTableTimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassTimeTableTimeActivityId");

                    b.HasIndex("ClassTimeTableDayId");

                    b.HasIndex("ClassTimeTableTimeId");

                    b.ToTable("ClassTimeTableTimeActivity");
                });

            modelBuilder.Entity("DAL.Authentication.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("DAL.Authentication.AppActivity", b =>
                {
                    b.HasOne("DAL.Authentication.AppActivityParent", "Parent")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DAL.Authentication.RoleActivity", b =>
                {
                    b.HasOne("DAL.Authentication.AppActivity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Authentication.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Activity");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("DAL.ClassEntities.ClassLookup", b =>
                {
                    b.HasOne("SMP.DAL.Models.GradeEntities.GradeGroup", "GradeLevel")
                        .WithMany("Classes")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeLevel");
                });

            modelBuilder.Entity("DAL.ClassEntities.SessionClass", b =>
                {
                    b.HasOne("DAL.ClassEntities.ClassLookup", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.TeachersInfor.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("FormTeacherId");

                    b.HasOne("DAL.SessionEntities.Session", "Session")
                        .WithMany("SessionClass")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Session");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DAL.SessionEntities.Session", b =>
                {
                    b.HasOne("DAL.TeachersInfor.Teacher", "HeadTeacher")
                        .WithMany()
                        .HasForeignKey("HeadTeacherId");

                    b.Navigation("HeadTeacher");
                });

            modelBuilder.Entity("DAL.StudentInformation.StudentContact", b =>
                {
                    b.HasOne("SMP.DAL.Models.Parents.Parents", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany("Students")
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Authentication.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Parent");

                    b.Navigation("SessionClass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.SubjectModels.Subject", b =>
                {
                    b.HasOne("SMP.DAL.Models.ResultModels.ScoreEntry", "ScoreEntry")
                        .WithMany()
                        .HasForeignKey("ScoreEntryId");

                    b.Navigation("ScoreEntry");
                });

            modelBuilder.Entity("DAL.TeachersInfor.Teacher", b =>
                {
                    b.HasOne("DAL.Authentication.AppUser", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("DAL.TeachersInfor.Teacher", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Authentication.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Authentication.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Authentication.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Authentication.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMP.DAL.Models.Admission.Admission", b =>
                {
                    b.HasOne("SMP.DAL.Models.Admission.AdmissionNotification", "AdmissionNotification")
                        .WithMany("Admission")
                        .HasForeignKey("AdmissionNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.Admission.AdmissionSetting", "AdmissionSettings")
                        .WithMany("Admission")
                        .HasForeignKey("AdmissionSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.ClassEntities.ClassLookup", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmissionNotification");

                    b.Navigation("AdmissionSettings");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SMP.DAL.Models.Annoucement.Announcements", b =>
                {
                    b.HasOne("DAL.Authentication.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SentBy");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.AssessmentScoreRecord", b =>
                {
                    b.HasOne("SMP.DAL.Models.AssessmentEntities.ClassAssessment", "ClassAssessment")
                        .WithMany()
                        .HasForeignKey("ClassAssessmentId");

                    b.HasOne("SMP.DAL.Models.AssessmentEntities.HomeAssessment", "HomeAssessment")
                        .WithMany()
                        .HasForeignKey("HomeAssessmentId");

                    b.HasOne("DAL.StudentInformation.StudentContact", "StudentContact")
                        .WithMany()
                        .HasForeignKey("StudentContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassAssessment");

                    b.Navigation("HomeAssessment");

                    b.Navigation("StudentContact");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.ClassAssessment", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany()
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.ClassEntities.SessionClassSubject", "SessionClassSubject")
                        .WithMany("ClassAssessments")
                        .HasForeignKey("SessionClassSubjectId");

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId");

                    b.Navigation("SessionClass");

                    b.Navigation("SessionClassSubject");

                    b.Navigation("SessionTerm");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.HomeAssessment", b =>
                {
                    b.HasOne("SMP.DAL.Models.ClassEntities.SessionClassGroup", "SessionClassGroup")
                        .WithMany()
                        .HasForeignKey("SessionClassGroupId");

                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany()
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.ClassEntities.SessionClassSubject", "SessionClassSubject")
                        .WithMany("HomeAssessments")
                        .HasForeignKey("SessionClassSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionClass");

                    b.Navigation("SessionClassGroup");

                    b.Navigation("SessionClassSubject");

                    b.Navigation("SessionTerm");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.HomeAssessmentFeedBack", b =>
                {
                    b.HasOne("SMP.DAL.Models.AssessmentEntities.HomeAssessment", "HomeAssessment")
                        .WithMany("HomeAssessmentFeedBacks")
                        .HasForeignKey("HomeAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.StudentInformation.StudentContact", "StudentContact")
                        .WithMany()
                        .HasForeignKey("StudentContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeAssessment");

                    b.Navigation("StudentContact");
                });

            modelBuilder.Entity("SMP.DAL.Models.Attendance.StudentAttendance", b =>
                {
                    b.HasOne("SMP.DAL.Models.Register.ClassRegister", "ClassRegister")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("ClassRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.StudentInformation.StudentContact", "StudentContact")
                        .WithMany()
                        .HasForeignKey("StudentContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassRegister");

                    b.Navigation("StudentContact");
                });

            modelBuilder.Entity("SMP.DAL.Models.ClassEntities.SessionClassGroup", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany()
                        .HasForeignKey("SessionClassId");

                    b.HasOne("SMP.DAL.Models.ClassEntities.SessionClassSubject", "SessionClassSubject")
                        .WithMany("SessionClassGroups")
                        .HasForeignKey("SessionClassSubjectId");

                    b.Navigation("SessionClass");

                    b.Navigation("SessionClassSubject");
                });

            modelBuilder.Entity("SMP.DAL.Models.ClassEntities.SessionClassSubject", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany("SessionClassSubjects")
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.SubjectModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.TeachersInfor.Teacher", "SubjectTeacher")
                        .WithMany()
                        .HasForeignKey("SubjectTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionClass");

                    b.Navigation("Subject");

                    b.Navigation("SubjectTeacher");
                });

            modelBuilder.Entity("SMP.DAL.Models.GradeEntities.Grade", b =>
                {
                    b.HasOne("SMP.DAL.Models.GradeEntities.GradeGroup", "GradeGroup")
                        .WithMany("Grades")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeGroup");
                });

            modelBuilder.Entity("SMP.DAL.Models.GradeEntities.GradeGroup", b =>
                {
                    b.HasOne("DAL.SessionEntities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.ClassNote", b =>
                {
                    b.HasOne("DAL.Authentication.AppUser", "AuthorDetail")
                        .WithMany()
                        .HasForeignKey("Author");

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId");

                    b.HasOne("DAL.SubjectModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorDetail");

                    b.Navigation("SessionTerm");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.StudentNote", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany("StudentNotes")
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId");

                    b.HasOne("DAL.StudentInformation.StudentContact", "Student")
                        .WithMany("StudentNote")
                        .HasForeignKey("StudentContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.SubjectModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.TeachersInfor.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionClass");

                    b.Navigation("SessionTerm");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.StudentNoteComment", b =>
                {
                    b.HasOne("SMP.DAL.Models.NoteEntities.StudentNoteComment", "RepliedTo")
                        .WithMany("Replies")
                        .HasForeignKey("RepliedToId");

                    b.HasOne("SMP.DAL.Models.NoteEntities.StudentNote", "StudentNote")
                        .WithMany()
                        .HasForeignKey("StudentNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Authentication.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("RepliedTo");

                    b.Navigation("StudentNote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.TeacherClassNote", b =>
                {
                    b.HasOne("SMP.DAL.Models.NoteEntities.ClassNote", "ClassNote")
                        .WithMany("TeacherClassNotes")
                        .HasForeignKey("ClassNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId");

                    b.HasOne("DAL.TeachersInfor.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassNote");

                    b.Navigation("SessionTerm");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.TeacherClassNoteComment", b =>
                {
                    b.HasOne("SMP.DAL.Models.NoteEntities.ClassNote", "ClassNote")
                        .WithMany()
                        .HasForeignKey("ClassNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.NoteEntities.TeacherClassNoteComment", "RepliedTo")
                        .WithMany("Replies")
                        .HasForeignKey("RepliedToId");

                    b.HasOne("DAL.Authentication.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");

                    b.Navigation("ClassNote");

                    b.Navigation("RepliedTo");
                });

            modelBuilder.Entity("SMP.DAL.Models.PinManagement.UsedPin", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany()
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "Sessionterm")
                        .WithMany()
                        .HasForeignKey("SessionTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.StudentInformation.StudentContact", "Student")
                        .WithMany()
                        .HasForeignKey("StudentContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.PinManagement.UploadedPin", "UploadedPin")
                        .WithMany("UsedPin")
                        .HasForeignKey("UploadedPinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionClass");

                    b.Navigation("Sessionterm");

                    b.Navigation("Student");

                    b.Navigation("UploadedPin");
                });

            modelBuilder.Entity("SMP.DAL.Models.Register.ClassRegister", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany("ClassRegisters")
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId");

                    b.Navigation("SessionClass");

                    b.Navigation("SessionTerm");
                });

            modelBuilder.Entity("SMP.DAL.Models.ResultModels.ClassScoreEntry", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany("ClassScoreEntries")
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.SubjectModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionClass");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SMP.DAL.Models.ResultModels.ScoreEntry", b =>
                {
                    b.HasOne("SMP.DAL.Models.ResultModels.ClassScoreEntry", "ClassScoreEntry")
                        .WithMany("ScoreEntries")
                        .HasForeignKey("ClassScoreEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId");

                    b.HasOne("DAL.StudentInformation.StudentContact", "StudentContact")
                        .WithMany("ScoreEntries")
                        .HasForeignKey("StudentContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassScoreEntry");

                    b.Navigation("SessionTerm");

                    b.Navigation("StudentContact");
                });

            modelBuilder.Entity("SMP.DAL.Models.ResultModels.SessionClassArchive", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany("SessionClassArchive")
                        .HasForeignKey("SessionClassId");

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId");

                    b.HasOne("DAL.StudentInformation.StudentContact", "StudentContact")
                        .WithMany("SessionClassArchive")
                        .HasForeignKey("StudentContactId");

                    b.Navigation("SessionClass");

                    b.Navigation("SessionTerm");

                    b.Navigation("StudentContact");
                });

            modelBuilder.Entity("SMP.DAL.Models.SessionEntities.SessionTerm", b =>
                {
                    b.HasOne("DAL.SessionEntities.Session", "Session")
                        .WithMany("Terms")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SMP.DAL.Models.StudentImformation.StudentSessionClassHistory", b =>
                {
                    b.HasOne("DAL.ClassEntities.SessionClass", "SessionClass")
                        .WithMany()
                        .HasForeignKey("SessionClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMP.DAL.Models.SessionEntities.SessionTerm", "SessionTerm")
                        .WithMany()
                        .HasForeignKey("SessionTermId");

                    b.HasOne("DAL.StudentInformation.StudentContact", "StudentContact")
                        .WithMany()
                        .HasForeignKey("StudentContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionClass");

                    b.Navigation("SessionTerm");

                    b.Navigation("StudentContact");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTable", b =>
                {
                    b.HasOne("DAL.ClassEntities.ClassLookup", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTableDay", b =>
                {
                    b.HasOne("SMP.DAL.Models.Timetable.ClassTimeTable", "TimeTable")
                        .WithMany("Days")
                        .HasForeignKey("ClassTimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTableTime", b =>
                {
                    b.HasOne("SMP.DAL.Models.Timetable.ClassTimeTable", "TimeTable")
                        .WithMany("Times")
                        .HasForeignKey("ClassTimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTableTimeActivity", b =>
                {
                    b.HasOne("SMP.DAL.Models.Timetable.ClassTimeTableDay", "Day")
                        .WithMany("Activities")
                        .HasForeignKey("ClassTimeTableDayId");

                    b.HasOne("SMP.DAL.Models.Timetable.ClassTimeTableTime", "Time")
                        .WithMany("Activities")
                        .HasForeignKey("ClassTimeTableTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("DAL.Authentication.AppActivityParent", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("DAL.Authentication.AppUser", b =>
                {
                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DAL.ClassEntities.SessionClass", b =>
                {
                    b.Navigation("ClassRegisters");

                    b.Navigation("ClassScoreEntries");

                    b.Navigation("SessionClassArchive");

                    b.Navigation("SessionClassSubjects");

                    b.Navigation("StudentNotes");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("DAL.SessionEntities.Session", b =>
                {
                    b.Navigation("SessionClass");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("DAL.StudentInformation.StudentContact", b =>
                {
                    b.Navigation("ScoreEntries");

                    b.Navigation("SessionClassArchive");

                    b.Navigation("StudentNote");
                });

            modelBuilder.Entity("SMP.DAL.Models.Admission.AdmissionNotification", b =>
                {
                    b.Navigation("Admission");
                });

            modelBuilder.Entity("SMP.DAL.Models.Admission.AdmissionSetting", b =>
                {
                    b.Navigation("Admission");
                });

            modelBuilder.Entity("SMP.DAL.Models.AssessmentEntities.HomeAssessment", b =>
                {
                    b.Navigation("HomeAssessmentFeedBacks");
                });

            modelBuilder.Entity("SMP.DAL.Models.ClassEntities.SessionClassSubject", b =>
                {
                    b.Navigation("ClassAssessments");

                    b.Navigation("HomeAssessments");

                    b.Navigation("SessionClassGroups");
                });

            modelBuilder.Entity("SMP.DAL.Models.GradeEntities.GradeGroup", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.ClassNote", b =>
                {
                    b.Navigation("TeacherClassNotes");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.StudentNoteComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("SMP.DAL.Models.NoteEntities.TeacherClassNoteComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("SMP.DAL.Models.PinManagement.UploadedPin", b =>
                {
                    b.Navigation("UsedPin");
                });

            modelBuilder.Entity("SMP.DAL.Models.Register.ClassRegister", b =>
                {
                    b.Navigation("StudentAttendances");
                });

            modelBuilder.Entity("SMP.DAL.Models.ResultModels.ClassScoreEntry", b =>
                {
                    b.Navigation("ScoreEntries");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTable", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Times");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTableDay", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("SMP.DAL.Models.Timetable.ClassTimeTableTime", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
